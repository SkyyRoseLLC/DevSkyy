name: 🏛️ Enterprise Governance Template

on:
  workflow_call:
    inputs:
      project-name:
        description: 'Project name for governance'
        required: true
        type: string
      compliance-level:
        description: 'Compliance level (basic, standard, enterprise)'
        required: false
        default: 'standard'
        type: string
      security-scan:
        description: 'Enable security scanning'
        required: false
        default: true
        type: boolean
      quality-gate:
        description: 'Quality gate threshold'
        required: false
        default: '80'
        type: string
      environment:
        description: 'Target environment'
        required: false
        default: 'development'
        type: string
    secrets:
      GOVERNANCE_TOKEN:
        required: false
      COMPLIANCE_WEBHOOK:
        required: false

env:
  PROJECT_NAME: ${{ inputs.project-name }}
  COMPLIANCE_LEVEL: ${{ inputs.compliance-level }}
  QUALITY_THRESHOLD: ${{ inputs.quality-gate }}

jobs:
  # ============================================================================
  # GOVERNANCE VALIDATION
  # ============================================================================
  
  governance-validation:
    name: 🏛️ Governance Validation
    runs-on: ubuntu-latest
    outputs:
      compliance-status: ${{ steps.compliance.outputs.status }}
      governance-score: ${{ steps.governance.outputs.score }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      
      - name: 🔍 Validate Project Structure
        id: structure
        run: |
          echo "🔍 Validating project structure for ${{ env.PROJECT_NAME }}..."
          
          # Required files check
          required_files=(
            "README.md"
            "requirements.txt"
            ".gitignore"
            "LICENSE"
            "SECURITY.md"
            "CONTRIBUTING.md"
          )
          
          missing_files=()
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              missing_files+=("$file")
            fi
          done
          
          if [[ ${#missing_files[@]} -gt 0 ]]; then
            echo "❌ Missing required files: ${missing_files[*]}"
            echo "structure_valid=false" >> $GITHUB_OUTPUT
          else
            echo "✅ All required files present"
            echo "structure_valid=true" >> $GITHUB_OUTPUT
          fi
      
      - name: 📋 Check Documentation Standards
        id: documentation
        run: |
          echo "📋 Checking documentation standards..."
          
          doc_score=100
          
          # Check README quality
          if [[ -f "README.md" ]]; then
            readme_lines=$(wc -l < README.md)
            if [[ $readme_lines -lt 50 ]]; then
              doc_score=$((doc_score - 20))
              echo "⚠️ README.md is too short (< 50 lines)"
            fi
            
            # Check for required sections
            required_sections=("Installation" "Usage" "Contributing" "License")
            for section in "${required_sections[@]}"; do
              if ! grep -qi "$section" README.md; then
                doc_score=$((doc_score - 10))
                echo "⚠️ Missing section: $section"
              fi
            done
          else
            doc_score=$((doc_score - 50))
          fi
          
          echo "documentation_score=$doc_score" >> $GITHUB_OUTPUT
          echo "📊 Documentation Score: $doc_score/100"
      
      - name: 🔒 Security Policy Validation
        id: security-policy
        run: |
          echo "🔒 Validating security policies..."
          
          security_score=100
          
          # Check for SECURITY.md
          if [[ ! -f "SECURITY.md" ]]; then
            security_score=$((security_score - 30))
            echo "❌ Missing SECURITY.md file"
          fi
          
          # Check for .github/SECURITY.md
          if [[ ! -f ".github/SECURITY.md" ]]; then
            security_score=$((security_score - 20))
            echo "❌ Missing .github/SECURITY.md file"
          fi
          
          # Check for security workflows
          if [[ ! -f ".github/workflows/security.yml" && ! -f ".github/workflows/codeql.yml" ]]; then
            security_score=$((security_score - 25))
            echo "❌ Missing security scanning workflows"
          fi
          
          # Check for dependabot configuration
          if [[ ! -f ".github/dependabot.yml" ]]; then
            security_score=$((security_score - 25))
            echo "❌ Missing dependabot configuration"
          fi
          
          echo "security_score=$security_score" >> $GITHUB_OUTPUT
          echo "🔒 Security Score: $security_score/100"
      
      - name: 📊 Compliance Assessment
        id: compliance
        run: |
          echo "📊 Assessing compliance for level: ${{ env.COMPLIANCE_LEVEL }}"
          
          structure_valid="${{ steps.structure.outputs.structure_valid }}"
          doc_score="${{ steps.documentation.outputs.documentation_score }}"
          security_score="${{ steps.security-policy.outputs.security_score }}"
          
          # Calculate overall compliance score
          if [[ "$structure_valid" == "true" ]]; then
            structure_score=100
          else
            structure_score=0
          fi
          
          overall_score=$(( (structure_score + doc_score + security_score) / 3 ))
          
          # Determine compliance status based on level
          case "${{ env.COMPLIANCE_LEVEL }}" in
            "basic")
              threshold=60
              ;;
            "standard")
              threshold=75
              ;;
            "enterprise")
              threshold=90
              ;;
            *)
              threshold=75
              ;;
          esac
          
          if [[ $overall_score -ge $threshold ]]; then
            echo "status=compliant" >> $GITHUB_OUTPUT
            echo "✅ Compliance Status: COMPLIANT ($overall_score >= $threshold)"
          else
            echo "status=non-compliant" >> $GITHUB_OUTPUT
            echo "❌ Compliance Status: NON-COMPLIANT ($overall_score < $threshold)"
          fi
          
          echo "score=$overall_score" >> $GITHUB_OUTPUT
      
      - name: 🏛️ Governance Score Calculation
        id: governance
        run: |
          compliance_score="${{ steps.compliance.outputs.score }}"
          
          # Additional governance factors
          governance_score=$compliance_score
          
          # Check for CI/CD workflows
          if [[ -d ".github/workflows" ]]; then
            workflow_count=$(find .github/workflows -name "*.yml" -o -name "*.yaml" | wc -l)
            if [[ $workflow_count -ge 3 ]]; then
              governance_score=$((governance_score + 5))
            fi
          fi
          
          # Check for issue templates
          if [[ -d ".github/ISSUE_TEMPLATE" ]]; then
            governance_score=$((governance_score + 3))
          fi
          
          # Check for pull request template
          if [[ -f ".github/pull_request_template.md" ]]; then
            governance_score=$((governance_score + 2))
          fi
          
          # Cap at 100
          [[ $governance_score -gt 100 ]] && governance_score=100
          
          echo "score=$governance_score" >> $GITHUB_OUTPUT
          echo "🏛️ Governance Score: $governance_score/100"

  # ============================================================================
  # QUALITY GATE ENFORCEMENT
  # ============================================================================
  
  quality-gate:
    name: 🚪 Quality Gate
    runs-on: ubuntu-latest
    needs: [governance-validation]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      
      - name: 🔍 Run Quality Checks
        uses: ./.github/workflows/reusable-quality-check.yml
        with:
          coverage-threshold: ${{ env.QUALITY_THRESHOLD }}
          environment: ${{ inputs.environment }}
          skip-security: ${{ !inputs.security-scan }}
      
      - name: 🚪 Enforce Quality Gate
        run: |
          governance_score="${{ needs.governance-validation.outputs.governance-score }}"
          compliance_status="${{ needs.governance-validation.outputs.compliance-status }}"
          
          echo "🚪 Enforcing quality gate..."
          echo "Governance Score: $governance_score"
          echo "Compliance Status: $compliance_status"
          echo "Quality Threshold: ${{ env.QUALITY_THRESHOLD }}"
          
          if [[ "$compliance_status" != "compliant" ]]; then
            echo "❌ Quality gate failed: Non-compliant governance"
            exit 1
          fi
          
          if [[ $governance_score -lt ${{ env.QUALITY_THRESHOLD }} ]]; then
            echo "❌ Quality gate failed: Governance score below threshold"
            exit 1
          fi
          
          echo "✅ Quality gate passed"

  # ============================================================================
  # COMPLIANCE REPORTING
  # ============================================================================
  
  compliance-reporting:
    name: 📊 Compliance Reporting
    runs-on: ubuntu-latest
    needs: [governance-validation, quality-gate]
    if: always()
    
    steps:
      - name: 📊 Generate Compliance Report
        run: |
          echo "# 🏛️ Governance & Compliance Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📋 Project Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Project**: ${{ env.PROJECT_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Compliance Level**: ${{ env.COMPLIANCE_LEVEL }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality Threshold**: ${{ env.QUALITY_THRESHOLD }}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📊 Scores" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Score | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          
          governance_score="${{ needs.governance-validation.outputs.governance-score }}"
          compliance_status="${{ needs.governance-validation.outputs.compliance-status }}"
          
          if [[ $governance_score -ge 90 ]]; then
            score_status="🟢 Excellent"
          elif [[ $governance_score -ge 75 ]]; then
            score_status="🟡 Good"
          elif [[ $governance_score -ge 60 ]]; then
            score_status="🟠 Fair"
          else
            score_status="🔴 Poor"
          fi
          
          echo "| Governance Score | $governance_score/100 | $score_status |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$compliance_status" == "compliant" ]]; then
            echo "| Compliance Status | - | ✅ Compliant |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Compliance Status | - | ❌ Non-Compliant |" >> $GITHUB_STEP_SUMMARY
          fi
          
          quality_gate_status="${{ needs.quality-gate.result }}"
          if [[ "$quality_gate_status" == "success" ]]; then
            echo "| Quality Gate | - | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Quality Gate | - | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Recommendations" >> $GITHUB_STEP_SUMMARY
          
          if [[ $governance_score -lt 90 ]]; then
            echo "- 📋 Improve documentation quality and completeness" >> $GITHUB_STEP_SUMMARY
            echo "- 🔒 Enhance security policies and procedures" >> $GITHUB_STEP_SUMMARY
            echo "- 🏗️ Ensure all required project files are present" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "$compliance_status" != "compliant" ]]; then
            echo "- ⚠️ Address compliance issues before proceeding" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "$quality_gate_status" != "success" ]]; then
            echo "- 🔧 Fix quality issues identified in the quality gate" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📅 Report Generated" >> $GITHUB_STEP_SUMMARY
          echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
      
      - name: 📤 Send Compliance Notification
        if: secrets.COMPLIANCE_WEBHOOK
        run: |
          governance_score="${{ needs.governance-validation.outputs.governance-score }}"
          compliance_status="${{ needs.governance-validation.outputs.compliance-status }}"
          
          curl -X POST "${{ secrets.COMPLIANCE_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"project\": \"${{ env.PROJECT_NAME }}\",
              \"compliance_level\": \"${{ env.COMPLIANCE_LEVEL }}\",
              \"governance_score\": $governance_score,
              \"compliance_status\": \"$compliance_status\",
              \"quality_gate\": \"${{ needs.quality-gate.result }}\",
              \"timestamp\": \"$(date -u '+%Y-%m-%dT%H:%M:%SZ')\",
              \"repository\": \"${{ github.repository }}\",
              \"commit\": \"${{ github.sha }}\"
            }"

  # ============================================================================
  # GOVERNANCE ENFORCEMENT
  # ============================================================================
  
  governance-enforcement:
    name: ⚖️ Governance Enforcement
    runs-on: ubuntu-latest
    needs: [governance-validation, quality-gate]
    if: needs.governance-validation.outputs.compliance-status != 'compliant' && inputs.compliance-level == 'enterprise'
    
    steps:
      - name: ⚖️ Enforce Governance Policies
        run: |
          echo "⚖️ Enforcing enterprise governance policies..."
          echo "❌ Project does not meet enterprise compliance requirements"
          echo "🚫 Blocking further actions until compliance is achieved"
          
          # In a real enterprise environment, this might:
          # - Block deployments
          # - Prevent merging
          # - Send alerts to compliance team
          # - Create compliance tickets
          
          exit 1
