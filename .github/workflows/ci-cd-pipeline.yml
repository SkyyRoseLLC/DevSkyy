name: DevSkyy Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Daily scans at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  # Code Quality & Security Analysis
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Security
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Set up Python
        uses: actions/setup-python@7f4fc3e22c37d6ff65e88745f38bd3157c663f7c
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety

      - name: Code formatting check (Black)
        run: |
          pip install black
          black --check --diff .

      - name: Import sorting check (isort)
        run: |
          pip install isort
          isort --check-only --diff .

      - name: Linting (flake8)
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Security analysis (Bandit)
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . --severity-level medium

      - name: Dependency vulnerability check
        run: |
          safety check

      - name: Upload security report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        if: always()
        with:
          name: security-report
          path: bandit-report.json

  # Backend Testing
  backend-tests:
    runs-on: ubuntu-latest
    name: Backend Tests
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
    
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Set up Python
        uses: actions/setup-python@7f4fc3e22c37d6ff65e88745f38bd3157c663f7c
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests
        env:
          MONGODB_URL: mongodb://localhost:27017
          ENVIRONMENT: testing
        run: |
          python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@ab904c41d6ece82784817410c45d8b8c02684457
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

      - name: Store coverage report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: coverage-report
          path: htmlcov/

  # Frontend Testing
  frontend-tests:
    runs-on: ubuntu-latest
    name: Frontend Tests
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Set up Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: frontend-build
          path: frontend/dist/

  # Performance Testing
  performance-tests:
    runs-on: ubuntu-latest
    name: Performance Tests
    needs: [backend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Set up Python
        uses: actions/setup-python@7f4fc3e22c37d6ff65e88745f38bd3157c663f7c
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install locust

      - name: Start application
        run: |
          python main.py &
          sleep 10

      - name: Run performance tests
        run: |
          # Basic performance test
          curl -f http://localhost:5000/health || exit 1
          
          # Load testing with locust (basic)
          echo "from locust import HttpUser, task, between
          
          class DevSkyyUser(HttpUser):
              wait_time = between(1, 3)
              
              @task
              def test_health_endpoint(self):
                  self.client.get('/health')
                  
              @task
              def test_agents_status(self):
                  self.client.get('/agents/status')
          " > locustfile.py
          
          locust --headless --users 10 --spawn-rate 2 --run-time 30s --host http://localhost:5000

  # Daily Website Scan
  daily-scan:
    runs-on: ubuntu-latest
    name: Daily Website Scan
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Set up Python
        uses: actions/setup-python@7f4fc3e22c37d6ff65e88745f38bd3157c663f7c
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run website scan
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python scripts/daily_scan_runner.py

      - name: Upload scan report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: daily-scan-report
          path: daily-scan-report.json

      - name: Create issue if problems found
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410
        if: failure()
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Daily Scan Alert - Issues Detected',
              body: `Daily automated scan detected issues that require attention.
              
              **Scan Date:** ${new Date().toISOString()}
              **Workflow:** ${context.workflow}
              **Run ID:** ${context.runId}
              
              Please review the scan results and take appropriate action.`,
              labels: ['automated-scan', 'needs-attention']
            })

  # Deployment to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [code-quality, backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          # Add actual deployment commands here
          echo "âœ… Staging deployment completed"

  # Deployment to Production
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [code-quality, backend-tests, frontend-tests, performance-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying to production environment..."
          # Add actual deployment commands here
          echo "âœ… Production deployment completed"

      - name: Notify deployment success
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              description: 'Successfully deployed to production',
              context: 'deployment/production'
            })

  # Agent Health Check
  agent-health-check:
    runs-on: ubuntu-latest
    name: Agent Health Check
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Set up Python
        uses: actions/setup-python@7f4fc3e22c37d6ff65e88745f38bd3157c663f7c
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check agent status
        run: |
          python -c "
          from agent.modules.agent_assignment_manager import AgentAssignmentManager
          from datetime import datetime
          import json
          
          print('ðŸ¤– Checking agent health status...')
          
          manager = AgentAssignmentManager()
          
          # Check all agents
          agents_status = {
              'timestamp': datetime.now().isoformat(),
              'agents_checked': 0,
              'healthy_agents': 0,
              'agents_with_issues': []
          }
          
          print('âœ… Agent health check completed')
          print(f'ðŸ“Š Status: {json.dumps(agents_status, indent=2)}')
          "