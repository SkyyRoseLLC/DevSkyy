
permissions:
  contents: read
  actions: read
  security-events: write
name: 🔍 Reusable Quality Check

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: false
        default: '3.11'
        type: string
      coverage-threshold:
        description: 'Coverage threshold percentage'
        required: false
        default: '80'
        type: string
      skip-security:
        description: 'Skip security checks'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Environment context'
        required: false
        default: 'development'
        type: string
    outputs:
      quality-score:
        description: 'Overall quality score'
        value: ${{ jobs.quality-analysis.outputs.score }}
      security-status:
        description: 'Security check status'
        value: ${{ jobs.security-check.outputs.status }}
      coverage-percentage:
        description: 'Code coverage percentage'
        value: ${{ jobs.coverage-check.outputs.percentage }}
    secrets:
      SONAR_TOKEN:
        required: false
      CODECOV_TOKEN:
        required: false

jobs:
  # ============================================================================
  # CODE QUALITY ANALYSIS
  # ============================================================================
  
  quality-analysis:
    name: 📊 Code Quality Analysis
    runs-on: ubuntu-latest
    outputs:
      score: ${{ steps.quality-score.outputs.score }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'
      
      - name: 📦 Install Quality Tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy pylint radon xenon
          pip install -r requirements.txt
      
      - name: 🎨 Check Code Formatting (Black)
        run: |
          black --check --diff . || echo "BLACK_FAILED=true" >> $GITHUB_ENV
      
      - name: 📋 Check Import Sorting (isort)
        run: |
          isort --check-only --diff . || echo "ISORT_FAILED=true" >> $GITHUB_ENV
      
      - name: 🔍 Lint Code (Flake8)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics > flake8-critical.txt || echo "FLAKE8_CRITICAL=true" >> $GITHUB_ENV
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics > flake8-full.txt
      
      - name: 🔍 Type Checking (MyPy)
        run: |
          mypy . --ignore-missing-imports --no-strict-optional > mypy-results.txt || echo "MYPY_FAILED=true" >> $GITHUB_ENV
      
      - name: 📊 Code Complexity Analysis (Radon)
        run: |
          radon cc . --min B --show-complexity > complexity-report.txt
          radon mi . --min B > maintainability-report.txt
      
      - name: 🧮 Calculate Quality Score
        id: quality-score
        run: |
          score=100
          
          # Deduct points for failures
          [[ "$BLACK_FAILED" == "true" ]] && score=$((score - 15))
          [[ "$ISORT_FAILED" == "true" ]] && score=$((score - 10))
          [[ "$FLAKE8_CRITICAL" == "true" ]] && score=$((score - 25))
          [[ "$MYPY_FAILED" == "true" ]] && score=$((score - 20))
          
          # Check complexity
          if grep -q "C\|D\|E\|F" complexity-report.txt; then
            score=$((score - 15))
          fi
          
          # Ensure minimum score
          [[ $score -lt 0 ]] && score=0
          
          echo "score=$score" >> $GITHUB_OUTPUT
          echo "📊 Quality Score: $score/100"
      
      - name: 📋 Upload Quality Reports
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: quality-reports
          path: |
            flake8-*.txt
            mypy-results.txt
            complexity-report.txt
            maintainability-report.txt

  # ============================================================================
  # SECURITY CHECK
  # ============================================================================
  
  security-check:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip-security }}
    outputs:
      status: ${{ steps.security-status.outputs.status }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'
      
      - name: 📦 Install Security Tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep
          pip install -r requirements.txt
      
      - name: 🔍 Security Linting (Bandit)
        run: |
          bandit -r . -f json -o bandit-report.json || echo "BANDIT_ISSUES=true" >> $GITHUB_ENV
          bandit -r . -ll
      
      - name: 🛡️ Dependency Security (Safety)
        run: |
          safety check --json --output safety-report.json || echo "SAFETY_ISSUES=true" >> $GITHUB_ENV
          safety check
      
      - name: 🔍 SAST Scanning (Semgrep)
        run: |
          semgrep --config=auto --json --output=semgrep-report.json . || echo "SEMGREP_ISSUES=true" >> $GITHUB_ENV
      
      - name: 📊 Security Status
        id: security-status
        run: |
          if [[ "$BANDIT_ISSUES" == "true" || "$SAFETY_ISSUES" == "true" || "$SEMGREP_ISSUES" == "true" ]]; then
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "🔒 Security Status: FAILED"
          else
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "🔒 Security Status: PASSED"
          fi
      
      - name: 📋 Upload Security Reports
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json

  # ============================================================================
  # COVERAGE CHECK
  # ============================================================================
  
  coverage-check:
    name: 📊 Coverage Analysis
    runs-on: ubuntu-latest
    outputs:
      percentage: ${{ steps.coverage.outputs.percentage }}
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          pip install pytest-cov coverage
      
      - name: 🧪 Run Tests with Coverage
        run: |
          pytest tests/ --cov=. --cov-report=xml --cov-report=term-missing --cov-fail-under=${{ inputs.coverage-threshold }}
        env:
          REDIS_URL: redis://localhost:6379/1
      
      - name: 📊 Extract Coverage Percentage
        id: coverage
        run: |
          coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//' > coverage-percentage.txt
          percentage=$(cat coverage-percentage.txt)
          echo "percentage=$percentage" >> $GITHUB_OUTPUT
          echo "📊 Coverage: $percentage%"
      
      - name: 📊 Upload Coverage to Codecov
        if: secrets.CODECOV_TOKEN
        uses: codecov/codecov-action@ab904c41d6ece82784817410c45d8b8c02684457 # v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage.xml
          flags: ${{ inputs.environment }}
          name: coverage-${{ inputs.environment }}

  # ============================================================================
  # PERFORMANCE BENCHMARKS
  # ============================================================================
  
  performance-check:
    name: ⚡ Performance Benchmarks
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-benchmark
      
      - name: ⚡ Run Performance Tests
        run: |
          pytest tests/performance/ --benchmark-json=benchmark-results.json --benchmark-only
        env:
          REDIS_URL: redis://localhost:6379/1
      
      - name: 📊 Upload Benchmark Results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: benchmark-results
          path: benchmark-results.json

  # ============================================================================
  # DOCUMENTATION CHECK
  # ============================================================================
  
  documentation-check:
    name: 📚 Documentation Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'
      
      - name: 📦 Install Documentation Tools
        run: |
          python -m pip install --upgrade pip
          pip install pydocstyle interrogate
          pip install -r requirements.txt
      
      - name: 📚 Check Docstring Coverage
        run: |
          interrogate . --ignore-init-method --ignore-init-module --ignore-magic --ignore-module --ignore-nested-functions --fail-under=70
      
      - name: 📝 Check Docstring Style
        run: |
          pydocstyle . --convention=google --add-ignore=D100,D104,D105,D107

  # ============================================================================
  # SUMMARY REPORT
  # ============================================================================
  
  quality-summary:
    name: 📋 Quality Summary
    runs-on: ubuntu-latest
    needs: [quality-analysis, security-check, coverage-check, performance-check, documentation-check]
    if: always()
    
    steps:
      - name: 📋 Generate Quality Report
        run: |
          echo "# 🔍 Quality Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📊 Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Score/Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------------|" >> $GITHUB_STEP_SUMMARY
          
          # Quality Analysis
          quality_score="${{ needs.quality-analysis.outputs.score }}"
          if [[ "$quality_score" -ge 80 ]]; then
            echo "| Code Quality | ✅ Passed | $quality_score/100 |" >> $GITHUB_STEP_SUMMARY
          elif [[ "$quality_score" -ge 60 ]]; then
            echo "| Code Quality | ⚠️ Warning | $quality_score/100 |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Code Quality | ❌ Failed | $quality_score/100 |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Security Check
          security_status="${{ needs.security-check.outputs.status }}"
          if [[ "$security_status" == "passed" ]]; then
            echo "| Security | ✅ Passed | No issues found |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Security | ❌ Failed | Issues detected |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Coverage Check
          coverage_pct="${{ needs.coverage-check.outputs.percentage }}"
          if [[ "$coverage_pct" -ge "${{ inputs.coverage-threshold }}" ]]; then
            echo "| Coverage | ✅ Passed | $coverage_pct% |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Coverage | ❌ Failed | $coverage_pct% (< ${{ inputs.coverage-threshold }}%) |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Performance Check
          if [[ "${{ needs.performance-check.result }}" == "success" ]]; then
            echo "| Performance | ✅ Passed | Benchmarks completed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Performance | ❌ Failed | Benchmark issues |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Documentation Check
          if [[ "${{ needs.documentation-check.result }}" == "success" ]]; then
            echo "| Documentation | ✅ Passed | Style & coverage OK |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Documentation | ❌ Failed | Style or coverage issues |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Recommendations" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$quality_score" -lt 80 ]]; then
            echo "- 🔧 Improve code quality by addressing linting and formatting issues" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "$security_status" != "passed" ]]; then
            echo "- 🔒 Address security vulnerabilities before deployment" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "$coverage_pct" -lt "${{ inputs.coverage-threshold }}" ]]; then
            echo "- 🧪 Increase test coverage to meet ${{ inputs.coverage-threshold }}% threshold" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📈 Environment: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "Python Version: ${{ inputs.python-version }}" >> $GITHUB_STEP_SUMMARY
