name: Docker Cloud Build & Deploy

on:
  push:
    branches: [main, develop]
    tags:
      - 'v*'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  DOCKER_REGISTRY: cloud://skyyrosellc
  IMAGE_NAME: devskyy_linux-amd64
  PLATFORMS: linux/amd64

jobs:
  # ============================================================================
  # Job 1: Test Suite
  # ============================================================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: Run tests
        run: |
          pytest tests/ --cov --cov-report=xml --cov-report=term
        continue-on-error: true

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-devskyy

  # ============================================================================
  # Job 2: Security Audit
  # ============================================================================
  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install audit tools
        run: |
          pip install pip-audit safety

      - name: Run pip-audit
        run: pip-audit
        continue-on-error: true

      - name: Run safety check
        run: safety check --json
        continue-on-error: true

  # ============================================================================
  # Job 3: Build Docker Image
  # ============================================================================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Cloud
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            GIT_COMMIT=${{ github.sha }}

      - name: Image digest
        run: echo ${{ steps.meta.outputs.digest }}

  # ============================================================================
  # Job 4: Deploy to Staging
  # ============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment:
      name: staging
      url: https://staging.devskyy.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=./kubeconfig

      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/devskyy-staging \
            devskyy=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --namespace=staging

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/devskyy-staging \
            --namespace=staging \
            --timeout=5m

      - name: Health check
        run: |
          sleep 30
          curl -f https://staging.devskyy.com/api/v1/monitoring/health || exit 1

  # ============================================================================
  # Job 5: Deploy to Production
  # ============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://api.devskyy.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=./kubeconfig

      - name: Deploy to Kubernetes (Blue-Green)
        run: |
          # Deploy to green environment
          kubectl set image deployment/devskyy-green \
            devskyy=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --namespace=production

          # Wait for rollout
          kubectl rollout status deployment/devskyy-green \
            --namespace=production \
            --timeout=5m

          # Health check
          sleep 30
          curl -f https://green.devskyy.com/api/v1/monitoring/health || exit 1

          # Switch traffic (update service selector)
          kubectl patch service devskyy-service \
            -n production \
            -p '{"spec":{"selector":{"version":"green"}}}'

      - name: Verify deployment
        run: |
          sleep 10
          curl -f https://api.devskyy.com/api/v1/monitoring/health || exit 1

      - name: Notify success
        if: success()
        run: |
          echo "✅ Production deployment successful!"
          echo "Version: ${{ github.sha }}"
          echo "URL: https://api.devskyy.com"

  # ============================================================================
  # Job 6: Rollback (if needed)
  # ============================================================================
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure()
    needs: [deploy-staging, deploy-production]

    steps:
      - name: Rollback staging
        if: needs.deploy-staging.result == 'failure'
        run: |
          kubectl rollout undo deployment/devskyy-staging \
            --namespace=staging

      - name: Rollback production
        if: needs.deploy-production.result == 'failure'
        run: |
          kubectl rollout undo deployment/devskyy-green \
            --namespace=production

          # Switch back to blue
          kubectl patch service devskyy-service \
            -n production \
            -p '{"spec":{"selector":{"version":"blue"}}}'

      - name: Notify rollback
        run: |
          echo "⚠️ Deployment rolled back due to failure"
