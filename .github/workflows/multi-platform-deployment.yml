
permissions:
  contents: read
  actions: read
  security-events: write
name: Multi-Platform Deployment Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Deployment target'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - vercel
          - docker
          - wordpress
      environment:
        description: 'Environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  security-check:
    name: Security Validation
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Validate Secrets Configuration
        run: |
          echo "üîê Validating deployment secrets..."
          
          # Check required secrets are present (without exposing values)
          if [ -z "${{ secrets.DOCKER_REGISTRY_USERNAME }}" ]; then
            echo "‚ùå DOCKER_REGISTRY_USERNAME secret not configured"
            exit 1
          fi
          
          if [ -z "${{ secrets.DOCKER_REGISTRY_TOKEN }}" ]; then
            echo "‚ùå DOCKER_REGISTRY_TOKEN secret not configured"
            exit 1
          fi
          
          if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
            echo "‚ùå VERCEL_TOKEN secret not configured"
            exit 1
          fi
          
          echo "‚úÖ All required secrets are configured"

      - name: Security Scan
        run: |
          echo "üõ°Ô∏è Running security scan..."
          # Add security scanning logic here
          echo "‚úÖ Security scan complete"

  docker-deployment:
    name: Docker Hub Deployment
    runs-on: ubuntu-latest
    needs: security-check
    if: github.ref == 'refs/heads/main' && (github.event.inputs.deployment_target == 'docker' || github.event.inputs.deployment_target == 'all' || github.event.inputs.deployment_target == '')
    
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: Login to Docker Hub
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        with:
          images: docker.io/skyyrosellc/devskyy
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@ca052bb54ab0790a636c9b5f226502c73d547a25 # v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENVIRONMENT=production
            VERSION=${{ github.sha }}

      - name: Docker Image Security Scan
        run: |
          echo "üîç Scanning Docker image for vulnerabilities..."
          # Add Docker image security scanning
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $HOME/Library/Caches:/root/.cache/ \
            aquasec/trivy:latest image docker.io/skyyrosellc/devskyy:latest
          echo "‚úÖ Docker security scan complete"

      - name: Update Docker Hub Description
        uses: peter-evans/dockerhub-description@432a30c9e07499fd01da9f8a49f0faf9e0ca5b77 # v4
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}
          repository: skyyrosellc/devskyy
          readme-filepath: ./DOCKER_README.md

  vercel-deployment:
    name: Vercel Deployment
    runs-on: ubuntu-latest
    needs: security-check
    if: github.ref == 'refs/heads/main' && (github.event.inputs.deployment_target == 'vercel' || github.event.inputs.deployment_target == 'all' || github.event.inputs.deployment_target == '')
    
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Pre-deployment Tests
        run: |
          echo "üß™ Running pre-deployment tests..."
          python -m pytest tests/ -v --tb=short
          echo "‚úÖ Pre-deployment tests passed"

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@16e87c0a08142b0d0d33b76aeaf20823c381b9b9 # v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

      - name: Vercel Deployment Health Check
        run: |
          echo "üè• Performing Vercel deployment health check..."
          sleep 30  # Wait for deployment to be ready
          
          # Health check endpoint
          HEALTH_URL="https://devskyy.vercel.app/health"
          
          for i in {1..5}; do
            if curl -f "$HEALTH_URL"; then
              echo "‚úÖ Vercel deployment health check passed"
              break
            else
              echo "‚è≥ Health check attempt $i failed, retrying..."
              sleep 10
            fi
          done

  wordpress-deployment:
    name: WordPress Hosting Deployment
    runs-on: ubuntu-latest
    needs: security-check
    if: github.ref == 'refs/heads/main' && (github.event.inputs.deployment_target == 'wordpress' || github.event.inputs.deployment_target == 'all' || github.event.inputs.deployment_target == '')
    
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Prepare WordPress Deployment Package
        run: |
          echo "üì¶ Preparing WordPress deployment package..."
          
          # Create WordPress-compatible structure
          mkdir -p wp-deployment/devskyy-api
          
          # Copy application files (excluding development files)
          rsync -av --exclude='.git' \
                   --exclude='node_modules' \
                   --exclude='__pycache__' \
                   --exclude='.pytest_cache' \
                   --exclude='tests' \
                   --exclude='.github' \
                   --exclude='tools' \
                   --exclude='docs' \
                   . wp-deployment/devskyy-api/
          
          # Create WordPress integration files
          cat > wp-deployment/devskyy-api/wp-config.php << 'EOF'
          <?php
          // WordPress integration for DevSkyy API
          define('DEVSKYY_API_ENDPOINT', '/devskyy-api/');
          define('DEVSKYY_API_VERSION', '5.2.0');
          ?>
          EOF
          
          # Create deployment archive
          cd wp-deployment
          tar -czf ../devskyy-wp-deployment.tar.gz .
          cd ..
          
          echo "‚úÖ WordPress deployment package ready"

      - name: Deploy to WordPress Hosting
        run: |
          echo "üåê Deploying to WordPress hosting..."
          
          # Install SSH client and dependencies
          sudo apt-get update && sudo apt-get install -y openssh-client rsync sshpass
          
          # Setup SSH configuration
          mkdir -p ~/.ssh
          echo "${{ secrets.WP_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Add host to known hosts
          ssh-keyscan -H ${{ secrets.WP_SSH_HOST }} >> ~/.ssh/known_hosts
          
          # Test SSH connection
          ssh -o ConnectTimeout=10 ${{ secrets.WP_SSH_USER }}@${{ secrets.WP_SSH_HOST }} "echo 'SSH connection successful'"
          
          # Upload deployment package
          scp -o ConnectTimeout=30 devskyy-wp-deployment.tar.gz \
              ${{ secrets.WP_SSH_USER }}@${{ secrets.WP_SSH_HOST }}:/tmp/
          
          # Execute deployment on remote server
          ssh ${{ secrets.WP_SSH_USER }}@${{ secrets.WP_SSH_HOST }} << 'EOF'
            set -e
            echo "üìÇ Extracting deployment package..."
            
            # Create backup of existing deployment
            if [ -d "/home/skyyrose/public_html/devskyy-api" ]; then
              mv /home/skyyrose/public_html/devskyy-api \
                 /home/skyyrose/public_html/devskyy-api-backup-$(date +%Y%m%d-%H%M%S)
            fi
            
            # Extract new deployment
            cd /home/skyyrose/public_html/
            tar -xzf /tmp/devskyy-wp-deployment.tar.gz
            
            # Set proper permissions
            chmod -R 755 devskyy-api/
            chown -R skyyrose:skyyrose devskyy-api/
            
            # Install Python dependencies (if Python is available)
            if command -v python3 &> /dev/null; then
              cd devskyy-api
              python3 -m pip install --user -r requirements.txt
            fi
            
            # Clean up
            rm /tmp/devskyy-wp-deployment.tar.gz
            
            echo "‚úÖ WordPress deployment complete"
          EOF

      - name: WordPress Deployment Verification
        run: |
          echo "üîç Verifying WordPress deployment..."
          
          # Test API endpoint availability
          WP_API_URL="https://skyyrose.wordpress.com/devskyy-api/health"
          
          for i in {1..3}; do
            if curl -f "$WP_API_URL" 2>/dev/null; then
              echo "‚úÖ WordPress API endpoint is accessible"
              break
            else
              echo "‚è≥ WordPress API check attempt $i failed, retrying..."
              sleep 15
            fi
          done

  deployment-notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [docker-deployment, vercel-deployment, wordpress-deployment]
    if: always()
    
    steps:
      - name: Deployment Summary
        run: |
          echo "üìä DEPLOYMENT SUMMARY" >> $GITHUB_STEP_SUMMARY
          echo "===================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Results:**" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Hub: ${{ needs.docker-deployment.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Vercel: ${{ needs.vercel-deployment.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- WordPress: ${{ needs.wordpress-deployment.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment URLs:**" >> $GITHUB_STEP_SUMMARY
          echo "- Vercel: https://devskyy.vercel.app" >> $GITHUB_STEP_SUMMARY
          echo "- WordPress: https://skyyrose.wordpress.com/devskyy-api/" >> $GITHUB_STEP_SUMMARY
          echo "- Docker: docker.io/skyyrosellc/devskyy:latest" >> $GITHUB_STEP_SUMMARY

      - name: 'Notify Vercel - Multi-Platform Deployment Status'
        uses: 'vercel/repository-dispatch/actions/status@30f760c6640485cd92f8c785ef361382555fb712' # v1
        with:
          name: 'Vercel - dev-skyy: multi-platform-deployment'
        if: always()
